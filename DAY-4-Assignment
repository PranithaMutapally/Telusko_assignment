⭐ What are Annotations?

 Java annotations are a form of metadata that provide additional information about elements in your Java code.
 They allow you to add special markers, tags, or labels to classes, methods, variables, and other program elements. 
 Annotations are used by the compiler, runtime environment, or other tools to process or analyze your code.

Here are some key points to understand about Java annotations:

1.Syntax: Annotations are represented by the '@' symbol followed by the annotation name. 
They can be placed directly above the element they are annotating, like this: @AnnotationName.

2.Built-in Annotations: Java provides several built-in annotations, such as @Override, @Deprecated, and @SuppressWarnings.
These annotations have specific meanings and are used to communicate certain intentions or instructions to the compiler or other tools.

3.Custom Annotations: You can define your own annotations using the @interface keyword. 
This allows you to create annotations tailored to your specific needs. 
Custom annotations can include elements, which are similar to methods, and can have default values.

4.Annotation Processors: Annotations are often processed by tools or frameworks at compile-time or runtime. 
Annotation processors analyze the annotated code and generate additional code or perform specific actions based on the annotations. 
They can be used for tasks like generating boilerplate code, validating code, or configuring the behavior of frameworks.

5.Target Elements: Annotations can be applied to various elements in Java, including classes, methods, fields, parameters, and more.
Each annotation specifies its allowed targets, indicating where it can be placed.

6.Reflection: Annotations can be accessed at runtime using Java's reflection API.
This allows you to inspect the annotated elements and retrieve information stored within the annotations, enabling dynamic behavior based on the annotations present in the code.

⭐Understanding the Differences between Service, Component, and Controller Annotations!



1. @Service Annotation:

The @Service annotation is typically used to mark a class as a service component in the business logic layer of an application.

It represents a service class that performs specific business operations or coordinates the workflow between different components.



2. @Component Annotation:

The @Component annotation is a generic annotation used to mark a class as a Spring component.

It is a general-purpose annotation and can be used to annotate any class that should be managed as a bean by the Spring container.

@Component is the base annotation for more specific annotations like @Service, @Controller, and @Repository.



3. @Controller Annotation:

 The @Controller annotation is typically used to mark a class as a controller component in the presentation layer of a web application.It represents a class that handles and processes incoming web requests.



⭐Annotations used in project and their levels:

@SpringBootApplication: It enables auto-configuration, component scanning and marks the class as a configuration class.

Level: Class level (for the main class)

@Autowired: used to inject dependencies automatically. It can be applied to fields, constructors, or setter methods of a class.

Level: method level.

@GetMapping: used to map HTTP GET requests to a specific method in a controller. 

Level: Method level.

@PostMapping: used to map HTTP POST requests to a specific method in a controller. 

Level: Method level.

@Entity: used to mark a class as a JPA (Java Persistence API) entity. 

Level: Class level.

@GeneratedValue: It defines how the primary key value is automatically generated by the underlying database.

Level: Field level.

@Service: It is typically used to define services that encapsulate

 business logic and can be autodetected by Spring's component scanning mechanism. Level: Class level.

@Repository: used to mark a class as a repository component, typically used for database access or persistence. 

Level: Class level.
